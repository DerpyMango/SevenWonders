import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

public class Player
{
    private int coins, milLosses, milVic;
    private int[] leftTradeCost, rightTradeCost;
    private int warBoost;
    private WonderBoard wb;
    private static final HashMap<String, Integer> ownedMap = new HashMap<String, Integer>();
    {
        {
            ownedMap.put("resource", 0);
            ownedMap.put("military", 1);
            ownedMap.put("science", 2);
            ownedMap.put("commerce", 3);
            ownedMap.put("civil", 4);
            ownedMap.put("guild", 5);
            ownedMap.put("trade", 6);
            ownedMap.put("wb", 7);
        }
    };

    private static final HashMap<String, Integer> handMap = new HashMap<String, Integer>()
    {
        {
            ownedMap.put("resource", 0);
            ownedMap.put("military", 1);
            ownedMap.put("science", 2);
            ownedMap.put("commerce", 3);
            ownedMap.put("civil", 4);
            ownedMap.put("guild", 5);
        }
    };

    private ArrayList<Card>[] ownedCards;
    private ArrayList<Card> hand;

    public Player()
    {
        ownedCards = (ArrayList<Card>[])(new ArrayList[8]);
        hand = new ArrayList<Card>();
        for(int x=0;x<8;x++)
        {
        	ownedCards[x] = new ArrayList<Card>();
        }
        setCoins(3);
        setMilLosses(0);
        setMilVic(0);
        warBoost = 0;
        leftTradeCost = new int[7];
        rightTradeCost = new int[7];
        for (int i = 0; i < 7; i++)
        {
            leftTradeCost[i] = 2;
            rightTradeCost[i] = 2;
        }
    }

    public int getCoins()
    {
        return coins;
    }

    public int getMilLosses()
    {
        return milLosses;
    }

    public int getMilVics()
    {
        return milVic;
    }

    public int[] getLeftTradeCost()
    {
        return leftTradeCost;
    }

    public int[] getRightTradeCost()
    {
        return rightTradeCost;
    }

    public ArrayList<Card> getHand()
    {
        return hand;
    }

    public ArrayList<Card>[] getOwnedCards()
    {
        return ownedCards;
    }
    public WonderBoard getWonderBoard()
    {
        return wb;
    }
    public void setCoins(int c)
    {
        coins = c;
    }

    public void addCoins(int c)
    {
        coins += c;
    }

    public void setMilLosses(int ml)
    {
        milLosses = ml;
    }

    public void addMilLoss(int losses)
    {
        milLosses += losses;
    }

    public void setMilVic(int mv)
    {
        milVic = mv;
    }

    public void addMilVic(int vics)
    {
        milVic += vics;
    }

    public void setWonderBoard(WonderBoard w)
    {
        wb = w;
    }

    public void setHand(ArrayList<Card> h)
    {
        hand = h;
    }
    public void printHand()
    {
    	for(Card cc:hand)
        {
        	System.out.print(cc.getName()+" "+cc.getCost()+", ");
        }
    	System.out.println();
    	
    }
    public void setLeftTradeCost(int[] ltc)
    {
        leftTradeCost = ltc;
    }

    public void setRightTradeCost(int[] rtc)
    {
        rightTradeCost = rtc;
    }

    public void discount(boolean left, boolean r)
    {
        if (left)
        {
            if (r)
            {
                for (int i = 0; i < 4; i++)
                {
                    leftTradeCost[i] = 1;
                }
            }
            else
                for (int i = 4; i < 7; i++)
                {
                    leftTradeCost[i] = 1;
                }
        }
        else
        {
            if (r)
            {
                for (int i = 0; i < 4; i++)
                {
                    rightTradeCost[i] = 1;
                }
            }
            else
                for (int i = 4; i < 7; i++)
                {
                    rightTradeCost[i] = 1;
                }
        }
    }
    
    public void addTradedCard(Card c)
    {
        ownedCards[ownedMap.get("trade")].add(c);
    }

    public boolean addToOwnedCards(Card c)
    {
        if (canAfford(c))
        {
            ownedCards[ownedMap.get(c.getType())].add(c);
            setCoins(coins - c.getCost().getRCost()[c.getCost().getRCost().length - 1]);
            if (c.getType().equals("commerce"))
            {
                if (c.getName().equals("East Trading Post"))
                    discount(false, true);
                else if (c.getName().equals("West Trading Post"))
                    discount(true, true);
                else if (c.getName().equals("Market Place"))
                {
                    discount(true, false);
                    discount(false, false);
                }
                else if (c.getName().equals("Vineyard") || c.getName().equals("Haven"))
                {
                    for (Card a : ownedCards[ownedMap.get("resource")])
                    {
                        if (a.getColor().equals("Brown"))
                            addCoins(1);
                    }
                }
                else if (c.getName().equals("Lighthouse"))
                {
                    addCoins(ownedCards[ownedMap.get("commerce")].size());
                }
                else if (c.getName().equals("Arena"))
                {
                    addCoins(3 * wb.numWonders());
                }
            }
            return true;
        }
        else
            return false;
    }

    public boolean canAfford(Card c)
    {
        String p = c.getCost().getPrereq();

        if (p != null)
        {
            for (ArrayList<Card> a : ownedCards)
            {
                if(!a.isEmpty())
                {
                	for (Card cc : a)
                    {
                        if (cc.getName().equals(p))
                            return true;
                    }
                }
            	
            }
        }

        int[] costarr = c.getCost().getRCost();
        int[] resources = new int[costarr.length];

        for (Card cc : ownedCards[ownedMap.get("resource")])
        {
            for (int i = 0; i < ((ResourceCard) cc).getResources().length; i++)
            {
                resources[i] += ((ResourceCard) cc).getResources()[i];
            }
        }

        for (Card cc : ownedCards[ownedMap.get("trade")])
        {
            for (int i = 0; i < ((ResourceCard) cc).getResources().length; i++)
            {
                resources[i] += ((ResourceCard) cc).getResources()[i];
            }
        }

        for (Card cc : ownedCards[ownedMap.get("wb")])
        {
            for (int i = 0; i < ((ResourceCard) cc).getResources().length; i++)
            {
                resources[i] += ((ResourceCard) cc).getResources()[i];
            }
        }

        resources[resources.length - 1] = coins;

        for (int i = 0; i < costarr.length; i++)
        {
            if (resources[i] < costarr[i])
                return false;
        }

        return true;
    }

    public boolean canAfford(Cost c)
    {
        int[] costarr = c.getRCost();
        int[] resources = new int[costarr.length];

        for (Card cc : ownedCards[ownedMap.get("resource")])
        {
            for (int i = 0; i < ((ResourceCard) cc).getResources().length; i++)
            {
                resources[i] += ((ResourceCard) cc).getResources()[i];
            }
        }

        for (Card cc : ownedCards[ownedMap.get("trade")])
        {
            for (int i = 0; i < ((ResourceCard) cc).getResources().length; i++)
            {
                resources[i] += ((ResourceCard) cc).getResources()[i];
            }
        }

        for (Card cc : ownedCards[ownedMap.get("wb")])
        {
            for (int i = 0; i < ((ResourceCard) cc).getResources().length; i++)
            {
                resources[i] += ((ResourceCard) cc).getResources()[i];
            }
        }

        resources[resources.length - 1] = coins;

        for (int i = 0; i < costarr.length; i++)
        {
            if (resources[i] < costarr[i])
                return false;
        }

        return true;
    }

    public boolean buildWonder(Card c)
    {
        if (canAfford(wb.returnWonderCost()))
        {
            wb.build();
            ownedCards[ownedMap.get(c.getType())].remove(c);
            if (wb.location.equals("The Temple of Artemis at Ephesus") && )
            	addCoins(9);
            else if (wb.location.contentEquals(""))
            //work in progress
            return true;
        }
        return false;
    }

    public int wondersBuilt()
    {
        return wb.numWonders();
    }


    public int getMilStrength()
    {
        int ms = 0;

        for (Card c : ownedCards[ownedMap.get("military")])
        {
            ms += ((MilCard)c).getArmyCount();
        }

        return ms + warBoost;
    }

    public int getCivPoints()
    {
        int points = 0;
        for (Card cc : ownedCards[ownedMap.get("civil")])
        {
            points += ((CivilCard)cc).getPoints();
        }

        return points;
    }

    public int getScientificPoints()
    {
        int points = 0;
        //Order is Math, Engi, Lit
        ArrayList<Integer> identicals = new ArrayList<Integer>();
        for (int i = 0; i < 3; i++)
        {
            identicals.add(0);
        }

        for (Card cc : ownedCards[ownedMap.get("science")])
        {
            if (((SciCard) cc).getStatus().equals("Math"))
            {
                identicals.set(0, identicals.get(0) + 1);
            }

            else if (((SciCard) cc).getStatus().equals("Engi"))
            {
                identicals.set(1, identicals.get(0) + 1);
            }

            else if (((SciCard) cc).getStatus().equals("Lit"))
            {
                identicals.set(2, identicals.get(0) + 1);
            }
        }

        for (int i = identicals.size()-1; i > -1; i--)
        {
            if (identicals.get(i) != 0)
                points += Math.pow(identicals.get(i), 2);
            else
                identicals.remove(i);
        }

        if (identicals.size() < 3)
            return points;

        Collections.sort(identicals);
        points += identicals.get(0) * 7;

        return points;
    }

    public int getGuildPoints(ArrayList<Player> players,int self)
    {
        int points =0;
        ArrayList<Card>[] ownedLeft,ownedRight;
        for (Card c : ownedCards[ownedMap.get("guild")])
        {
            GuildCard cc = ((GuildCard)c);
            if(cc.getName().equals("Scientists Guild"))
                points+=0;
            else if(cc.getName().equals("Workers Guild"))
            {
                if(self-1<0)
                {
                    ownedLeft= players.get(players.size()).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("resource")].size()+ownedRight[ownedMap.get("resource")].size();
                }
                else if(self+1>=players.size())
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(0).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("resource")].size()+ownedRight[ownedMap.get("resource")].size();
                }
                else
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("resource")].size()+ownedRight[ownedMap.get("resource")].size();
                }
            }
            else if(cc.getName().equals("Craftsmen Guild"))
            {
                if(self-1<0)
                {
                    ownedLeft= players.get(players.size()).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("resource")].size()+ownedRight[ownedMap.get("resource")].size();
                }
                else if(self+1>=players.size())
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(0).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("resource")].size()+ownedRight[ownedMap.get("resource")].size();
                }
                else
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("resource")].size()+ownedRight[ownedMap.get("resource")].size();
                }
            }
            else if(cc.getName().equals("Traders Guild"))
            {
                if(self-1<0)
                {
                    ownedLeft= players.get(players.size()).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("commerce")].size()+ownedRight[ownedMap.get("commerce")].size();
                }
                else if(self+1>=players.size())
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(0).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("commerce")].size()+ownedRight[ownedMap.get("commerce")].size();
                }
                else
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("commerce")].size()+ownedRight[ownedMap.get("commerce")].size();
                }
            }
            else if(cc.getName().equals("Philosophers Guild"))
            {
                if(self-1<0)
                {
                    ownedLeft= players.get(players.size()).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("science")].size()+ownedRight[ownedMap.get("science")].size();
                }
                else if(self+1>=players.size())
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(0).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("science")].size()+ownedRight[ownedMap.get("science")].size();
                }
                else
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("science")].size()+ownedRight[ownedMap.get("science")].size();
                }
            }
            else if(cc.getName().equals("Spy Guild"))
            {
                if(self-1<0)
                {
                    ownedLeft= players.get(players.size()).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("military")].size()+ownedRight[ownedMap.get("military")].size();
                }
                else if(self+1>=players.size())
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(0).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("military")].size()+ownedRight[ownedMap.get("military")].size();
                }
                else
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("military")].size()+ownedRight[ownedMap.get("military")].size();
                }
            }
            else if(cc.getName().equals("Strategy Guild"))
            {
                int left,right;
                if(self-1<0)
                {
                    left = players.get(players.size()).getMilLosses();
                    right = players.get(self+1).getMilLosses();
                    points+=left+right;
                }
                else if(self+1>=players.size())
                {
                    left= players.get(self-1).getMilLosses();
                    right= players.get(0).getMilLosses();
                    points+=left+right;
                }
                else
                {
                    left= players.get(self-1).getMilLosses();
                    right= players.get(self+1).getMilLosses();
                    points+=left+right;
                }
            }
            else if(cc.getName().equals("Shipowners Guild"))
            {
                points+=ownedCards[ownedMap.get("resource")].size()+ownedCards[ownedMap.get("guild")].size();
            }
            else if(cc.getName().equals("Magistrates Guild"))
            {
                if(self-1<0)
                {
                    ownedLeft= players.get(players.size()).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("civil")].size()+ownedRight[ownedMap.get("civil")].size();
                }
                else if(self+1>=players.size())
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(0).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("civil")].size()+ownedRight[ownedMap.get("civil")].size();
                }
                else
                {
                    ownedLeft= players.get(self-1).getOwnedCards();
                    ownedRight= players.get(self+1).getOwnedCards();
                    points+=ownedLeft[ownedMap.get("civil")].size()+ownedRight[ownedMap.get("civil")].size();
                }
            }
            else
            {
                int left,right;
                if(self-1<0)
                {
                    left= players.get(players.size()).getWonderBoard().numWonders();
                    right= players.get(self+1).getWonderBoard().numWonders();
                    points+=left+right;
                }
                else if(self+1>=players.size())
                {
                    left= players.get(self-1).getWonderBoard().numWonders();
                    right= players.get(0).getWonderBoard().numWonders();
                    points+=left+right;
                }
                else
                {
                    left= players.get(self-1).getWonderBoard().numWonders();
                    right= players.get(self+1).getWonderBoard().numWonders();
                    points+=left+right;
                }
            }
        }
        return points;
    }

    public int getWonderPoints()
    {
        return wb.getVictoPoints();
    }

    public int getCommPoints()
    {
        int points =0;
        for (Card c : ownedCards[ownedMap.get("commerce")])
        {
            CommCard cc = ((CommCard)c);
            if (cc.getName().equals("Arena")|| cc.getName().equals("Lighthouse")|| cc.getName().equals("Haven"))
            {
                if(cc.getEffect().getRewards().containsValue("1VP")&&cc.getEffect().getRewards().containsKey("wTier"))
                {
                    points+=wb.numWonders();
                }
                else if(cc.getEffect().getRewards().containsValue("1VP")&&cc.getEffect().getRewards().containsKey("brownCa"))
                {
                    points+=ownedCards[ownedMap.get("resource")].size();
                }
                else if(cc.getEffect().getRewards().containsValue("1VP")&&cc.getEffect().getRewards().containsKey("goldCa"))
                {
                    points+=ownedCards[ownedMap.get("commerce")].size();
                }
            }
        }
        return points;
    }

    public int getMilPoints()
    {
        return milVic - milLosses;
    }

    public int getTreasuryPoints()
    {
        return coins % 3;
    }


    public int calcVP(ArrayList<Player> players,int self)
    {
        return getCivPoints() + getScientificPoints() + getGuildPoints(players,self) + getWonderPoints() + getMilPoints() + getTreasuryPoints();
    }

}
