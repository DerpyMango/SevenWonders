import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.TreeMap;

public class Board {
    private ArrayList<Player> players;
    private Deck[] decks;
    private Deck currentDeck;
    private ArrayList<Card> discard;
    private ArrayList<WonderBoard> boards;
    private int age;
    private ArrayList<String> places = new ArrayList<String>(Arrays.asList("Alexandria","Babylon","Ephesos","Giza","Halicarnassus","Rhodes","Zeus"));
    private ArrayList<String> picked = new ArrayList<String>();
    public Board() throws IOException
    {
        players = new ArrayList<Player>();
        for(int i = 0; i < 3; i++)
        {
            players.add(new Player());
        }
        decks = new Deck[3];
        for(int i = 0; i < 3; i++)
        {
            decks[i] = new Deck(i+1);
        }
        boards = new ArrayList<WonderBoard>();
        boards.add(new Alexandria());
        boards.add(new Babylon());
        boards.add(new Ephesos());
        boards.add(new Giza());
        boards.add(new Halicarnassus());
        boards.add(new Rhodes());
        boards.add(new Zeus());
        for(int i = 0; i < players.size(); i++)
        {
            String examp = "not";
            while(examp.equals("not"))
            {
                examp = chooseWonderBoard(players.get(i));
            }
            System.out.println("Sucessfully chosen");
            players.get(i).setCoins(3);

        }
        discard = new ArrayList<Card>();
        age=1;
    }
    public void setAge(int a)
    {
        age = a;
        currentDeck = decks[a-1];
    }
    public int getAge()
    {
        return age;
    }
    public void play()
    {
        // this just does one turn for all the players
        // the boardRunner will call on this method several times an age
        int in;
        Scanner sc = new Scanner(System.in);
        ArrayList<Card> hand;
        for(int x=0;x<players.size();x++)
        {
            System.out.println(players.get(x));
            System.out.println("Input your move "+players.get(x).getWonderBoard()+"(1 Build Card,2 Build Wonder,3 Discard Card)");
            in = sc.nextInt();
            if(in==1)
            {
                hand = players.get(x).getHand();
                players.get(x).printHand();
                System.out.println("Input the index of the card you want to build");
                int row = sc.nextInt();
                Card cc = hand.remove(row);
                while(!players.get(x).addToOwnedCards(cc))
                {
                    //need to finish what happens if cant afford
                    sc.nextLine();
                    System.out.println("Unable to afford card. Trade with another player? (y/n or x to exit trading)");
                    String yn = sc.nextLine();
                    if (yn.equals("y"))
                    {
                        trade(sc, x);
                    }
                    else
                    {
                        System.out.println("Exiting trading.");
                        break;
                    }
                }
            }

            else if(in==2)
            {
                hand = players.get(x).getHand();
                players.get(x).printHand();
                System.out.println("Input the index of the card you want to use to build a wonder");
                int row = sc.nextInt();
                //need to do the part f you can afford to build it or not
                while (!players.get(x).buildWonder(hand.get(row)))
                {
                    System.out.println("Unable to afford construction of wonder. Trade with another player? (y/n or x to exit trading)");
                    String yn = sc.nextLine();
                    if (yn.equals("y"))
                    {
                        trade(sc, x);
                    }
                    else
                    {
                        System.out.println("Exiting trading.");
                        break;
                    }
                }

            }
            else
            {
                hand = players.get(x).getHand();
                players.get(x).printHand();
                System.out.println("Input the index of the card you want to remove");
                int row = sc.nextInt();
                discard.add(hand.remove(row));
                players.get(x).addCoins(3);
            }
        }
    }
    public void dealCards()
    {
        ArrayList<Card> c = new ArrayList<Card>();
        for(int x=0;x<players.size();x++)
        {
            c = new ArrayList<Card>();
            for(int y=0;y<7;y++)
            {
                c.add(currentDeck.deal());
            }
            players.get(x).setHand(c);
            System.out.println(players.get(x).getHand().size());
        }
    }
    public void discardAll()
    {
        ArrayList<Card> hand;
        int row=0;
        for(int x=0;x<players.size();x++)
        {
            hand = players.get(x).getHand();
            for(int y=0;y<hand.size();y++)
                if(hand.size()!=0)
                {
                    row=y;
                }
            discard.add(hand.remove(0));
            players.get(x).addCoins(3);
        }
    }

    public int getLPlayerIndex(int i)
    {
        System.out.println("i "+ i);
        int index = i - 1;
        if (index < 0)
        {
            index = 3 - index;
        }
        return index;
    }

    public int getRPlayerIndex(int i)
    {
        int index = i + 1;
        if (index > 2)
        {
            index = index - 3;
        }
        return index;
    }

    public void trade(Scanner sc, int x)
    {
        System.out.println("Trade with the player to your left or right? (l/r)");
        String lr = sc.nextLine();
        if (lr.equals("l"))
        {
            System.out.println("Resource Cards owned by Left Player: " + players.get(getLPlayerIndex(x)).sectionToString(0));
            System.out.println("What card are your trading for? (Name of Card with spaces and each word capitalized if necessary) ");
            String name = sc.nextLine();
            int i = 0;//this loop was written assuming that they choose a card that is actually there
            while (i < players.get(getLPlayerIndex(x)).getOwnedCards()[0].size())
            {
                if (players.get(getLPlayerIndex(x)).getOwnedCards()[0].get(i).getName().equals(name))
                    break;
                i++;
            }
            if (players.get(getLPlayerIndex(x)).getOwnedCards()[0].get(i).getColor().equals("Brown") && players.get(x).getLeftTradeCost()[0] < players.get(x).getCoins())
            {
                players.get(x).addTradedCard(players.get(getLPlayerIndex(x)).getOwnedCards()[0].get(i));
                System.out.println(players.get(getLPlayerIndex(x)).getOwnedCards()[0].get(i).getName()+" traded from player to the left");
            }
            else
                System.out.println("Unable to afford trading for this card.");
        }
        else if (lr.equals("r"))
        {
            System.out.println("Resource Cards owned by Right Player: " + players.get(getRPlayerIndex(x)).sectionToString(0));
            System.out.println("What card are your trading for? (Name of Card with spaces and each word capitalized if necessary) ");
            String name = sc.nextLine();
            int i = 0;//this loop was written assuming that they choose a card that is actually there
            while (i < players.get(getRPlayerIndex(x)).getOwnedCards()[0].size())
            {
                if (players.get(getRPlayerIndex(x)).getOwnedCards()[0].get(i).getName().equals(name))
                    break;
                i++;
            }
            if (players.get(getRPlayerIndex(x)).getOwnedCards()[0].get(i).getColor().equals("Brown") && players.get(x).getRightTradeCost()[0] < players.get(x).getCoins())
            {
                players.get(x).addTradedCard(players.get(getRPlayerIndex(x)).getOwnedCards()[0].get(i));
                System.out.println(players.get(getRPlayerIndex(x)).getOwnedCards()[0].get(i).getName()+" traded from player to the right");
            }
            else
                System.out.println("Unable to afford trading for this card.");
        }
    }
    public void setDeck()
    {
        currentDeck = decks[age - 1];
    }


    public int iteratePlayer(int place)
    {
        if(age == 1 || age == 3)
            if(place == 3)
                return 1;
            else
                return ++place;
        else if(age == 2)
            if(place == 1)
                return 3;
            else
                return --place;
        return -1;
    }
    public void passDeck()
    {
        if(age%2==1)
        {
            ArrayList<Card> temp1 = players.get(0).getHand();
            ArrayList<Card> temp2 = players.get(1).getHand();
            ArrayList<Card> temp3 = players.get(2).getHand();
            players.get(0).setHand(temp3);
            players.get(1).setHand(temp1);
            players.get(2).setHand(temp2);
        }
        else
        {
            ArrayList<Card> temp1 = players.get(0).getHand();
            ArrayList<Card> temp2 = players.get(1).getHand();
            ArrayList<Card> temp3 = players.get(2).getHand();
            players.get(0).setHand(temp2);
            players.get(1).setHand(temp3);
            players.get(2).setHand(temp1);
        }

    }
    public String chooseWonderBoard(Player player)
    {

        Scanner kb = new Scanner(System.in);
        for(int i = 0; i < boards.size(); i++)
        {
            System.out.print(boards.get(i) + "\t");
        }
        System.out.print("\nChoose a location");
        String thing = kb.next();
        if(thing.equals("Giza")&& !picked.contains("Giza"))
        {
            player.setWonderBoard(new Giza());
            boards.remove(places.indexOf(thing));
            places.remove(thing);
            picked.add(thing);
            return "yes";
        }
        else if(thing.equalsIgnoreCase("Alexandria")&&!picked.contains(thing))
        {
            player.setWonderBoard(new Alexandria());
            boards.remove(places.indexOf(thing));
            places.remove(thing);
            picked.add(thing);
            return "yes";
        }
        else if(thing.equalsIgnoreCase("Halicarnassus")&&!picked.contains(thing))
        {
            player.setWonderBoard(new Halicarnassus());
            boards.remove(places.indexOf(thing));
            places.remove(thing);
            picked.add(thing);
            return "yes";
        }
        else if(thing.equalsIgnoreCase("Rhodes")&&!picked.contains(thing))
        {
            player.setWonderBoard(new Rhodes());
            boards.remove(places.indexOf(thing));
            places.remove(thing);
            picked.add(thing);
            return "yes";
        }
        else if(thing.equalsIgnoreCase("Zeus")&&!picked.contains(thing))
        {
            player.setWonderBoard(new Zeus());
            boards.remove(places.indexOf(thing));
            places.remove(thing);
            picked.add(thing);
            return "yes";
        }
        else if(thing.equalsIgnoreCase("Ephesos")&&!picked.contains(thing))
        {
            player.setWonderBoard(new Ephesos());
            boards.remove(places.indexOf(thing));
            places.remove(thing);
            picked.add(thing);
            return "yes";
        }
        else if(thing.equalsIgnoreCase("Babylon")&&!picked.contains(thing))
        {
            player.setWonderBoard(new Babylon());
            boards.remove(places.indexOf(thing));
            places.remove(thing);
            picked.add(thing);
            return "yes";
        }
        else
        {
            System.out.println("Pick Again");
            return "not";
        }

    }
    public void calcWinner()
    {
        int high = players.get(0).calcVP(players,0);
        int player=0;
        System.out.println("Final Ranking");
        for(int i=0;i<players.size();i++)
        {
            for(int x=0;x<players.size();x++)
            {
                if(players.get(x).calcVP(players,x)>high)
                {
                    high = players.get(x).calcVP(players,x);
                    player =x;
                }
            }
            System.out.println((i+1)+". player ("+(player+1)+ players.get(player).getWonderBoard().location + ") - "+players.get(player).calcVP(players,player));
            players.remove(player);
        }
    }
    public void war()
    {
        //compares most of the players
        for(int x=0;x<players.size()-1;x++)
        {
            if(players.get(x).getMilStrength()>players.get(x+1).getMilStrength())
            {
                players.get(x).setMilVic(age*2-1);
                players.get(x+1).setMilLosses(1);
            }
            else if(players.get(x).getMilStrength()<players.get(x+1).getMilStrength())
            {
                players.get(x+1).setMilVic(age*2-1);
                players.get(x).setMilLosses(1);
            }
        }
        //compares first and last player
        if(players.get(0).getMilStrength()>players.get(players.size()-1).getMilStrength())
        {
            players.get(0).setMilVic(age*2-1);
            players.get(players.size()-1).setMilLosses(1);
        }
        else if(players.get(0).getMilStrength()<players.get(players.size()-1).getMilStrength())
        {
            players.get(players.size()-1).setMilVic(age*2-1);
            players.get(0).setMilLosses(1);
        }
    }
}
