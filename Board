import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.TreeMap;

public class Board {
	private ArrayList<Player> players;
	private Deck[] decks;
	private Deck currentDeck;
	private ArrayList<Card> discard;
	private ArrayList<WonderBoard> boards;
	
	public Board() throws IOException
	{
		players = new ArrayList<Player>();
		for(int i = 0; i < 3; i++)
		{
			players.add(new Player());
		}
		decks = new Deck[3];
		for(int i = 0; i < 3; i++)
		{
			decks[i] = new Deck(i+1);
		}
		boards = new ArrayList<WonderBoard>();
		boards.add(new Alexandria());
		boards.add(new Babylon());
		boards.add(new Ephesos());
		boards.add(new Giza());
		boards.add(new Halicarnassus());
		boards.add(new Rhodes());
		boards.add(new Zeus());
		for(int i = 0; i < players.size(); i++)
		{
			String examp = "not";
			while(examp.equals("not"))
			{
				examp = chooseWonderBoard(players.get(i));
			}
			System.out.println("sucess");
			players.get(i).setCoins(3);
		}
		discard = new ArrayList<Card>();
	}
	
	public void play()
	{
		// this just does one turn for all the players 
		// the boardRunner will call on this method several times an age
		int in;
		Scanner sc = new Scanner(System.in);
		ArrayList<Card>[] hand;
		for(int x=0;x<players.size();x++)
		{
			System.out.println("Input what you wanna do(1 Build Card,2 Build Wonder,3 Discard Card)");
			in = sc.nextInt();
			if(in==1)
			{
				hand = players.get(x).getHand();
				System.out.println(hand.toString());
				System.out.println("Input the coordinate of the card you want to use to build wonder");
				int row = sc.nextInt();
				int col = sc.nextInt();
				Card cc = hand[row].remove(col);
				if(!players.get(x).addToOwnedCards(cc))
				{
					trade()
				}
			}
			else if(in==2)
			{
				hand = players.get(x).getHand();
				System.out.println(hand.toString());
				System.out.println("Input the coordinate of the card you want to use to build wonder");
				int row = sc.nextInt();
				int col = sc.nextInt();
				hand[row].remove(col);
				players.get(x).getWonderBoard().build();
			}
			else
			{
				hand = players.get(x).getHand();
				System.out.println(hand.toString());
				System.out.println("Input the coordinate of the card you want to remove");
				int row = sc.nextInt();
				int col = sc.nextInt();
				discard.add(hand[row].remove(col));
				players.get(x).addCoins(3);
			}
		}
	}
	public void trade(Player home,Player trading,int resource)
	{
		
	}
	public void setDeck(int age)
	{
		currentDeck = decks[age - 1];
	}

	
	public int iteratePlayer(int place, int age)
	{
		if(age == 1 || age == 3)
			if(place == 3)
				return 1;
			else
				return ++place;
		else if(age == 2)
			if(place == 1)
				return 3;
			else
				return --place;
		return -1;
	}
	public void passDeck(int age)
	{
		if(age%2==1)
		{
			ArrayList<Card>[] temp1 = players.get(0).getHand();
			ArrayList<Card>[] temp2 = players.get(1).getHand();
			ArrayList<Card>[] temp3 = players.get(2).getHand();
			players.get(0).setHand(temp3);
			players.get(1).setHand(temp1);
			players.get(2).setHand(temp2);
		}
		else
		{
			ArrayList<Card>[] temp1 = players.get(0).getHand();
			ArrayList<Card>[] temp2 = players.get(1).getHand();
			ArrayList<Card>[] temp3 = players.get(2).getHand();
			players.get(0).setHand(temp2);
			players.get(1).setHand(temp3);
			players.get(2).setHand(temp1);
		}
			
	}
	public String chooseWonderBoard(Player player)
	{
		Scanner kb = new Scanner(System.in);
		for(int i = 0; i < boards.size(); i++)
		{
			System.out.print(boards.get(i) + "	 ");
		}
		System.out.print("\nChoose a location");
		String thing = kb.next();
		if(thing.equalsIgnoreCase("Giza"))
		{
			player.setWonderBoard(new Giza());
			boards.remove(new Giza());
			return "yes";
		}
		else if(thing.equalsIgnoreCase("Alexandria"))
		{
			player.setWonderBoard(new Alexandria());
			boards.remove(new Alexandria());
			return "yes";
		}
		else if(thing.equalsIgnoreCase("Halicarnassus"))
		{
			player.setWonderBoard(new Halicarnassus());
			boards.remove(new Halicarnassus());
			return "yes";
		}
		else if(thing.equalsIgnoreCase("Rhodes"))
		{
			player.setWonderBoard(new Rhodes());
			boards.remove(new Rhodes());
			return "yes";
		}
		else if(thing.equalsIgnoreCase("Zeus"))
		{
			player.setWonderBoard(new Zeus());
			boards.remove(new Zeus());
			return "yes";
		}
		else if(thing.equalsIgnoreCase("Ephesos"))
		{
			player.setWonderBoard(new Ephesos());
			boards.remove(new Ephesos());
			return "yes";
		}
		else if(thing.equalsIgnoreCase("Babylon"))
		{
			player.setWonderBoard(new Babylon());
			boards.remove(new Babylon());
			return "yes";
		}
		else
		{
			System.out.println("Pick Again");
			return "not";
		}
		
	}
	public void calcWinner()
	{
		int high = players.get(0).calcVP(players,0);
		int player=0;
		System.out.println("Final Ranking");
		for(int i=0;i<players.size();i++)
		{
			for(int x=0;x<players.size();x++)
			{
				if(players.get(x).calcVP(players,x)>high)
				{
					high = players.get(x).calcVP(players,x);
					player =x;
				}
			}
			System.out.println((i+1)+". player "+(player+1)+" - "+players.get(player).calcVP(players,player));
			players.remove(player);
		}
	}
	public void war(int age)
	{
		//compares most of the players
		for(int x=0;x<players.size()-1;x++)
		{
			if(players.get(x).getMilStrength()>players.get(x+1).getMilStrength())
			{
				players.get(x).setMilVic(age*2-1);
				players.get(x+1).setMilLosses(1);
			}
			else if(players.get(x).getMilStrength()<players.get(x+1).getMilStrength())
			{
				players.get(x+1).setMilVic(age*2-1);
				players.get(x).setMilLosses(1);
			}
		}
		//compares first and last player
		if(players.get(0).getMilStrength()>players.get(players.size()-1).getMilStrength())
		{
			players.get(0).setMilVic(age*2-1);
			players.get(players.size()-1).setMilLosses(1);
		}
		else if(players.get(0).getMilStrength()<players.get(players.size()-1).getMilStrength())
		{
			players.get(players.size()-1).setMilVic(age*2-1);
			players.get(0).setMilLosses(1);
		}
	}
}
